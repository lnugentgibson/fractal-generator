angular.module("app", []).controller("Ctrl", function() {
  var Ctrl = this;
  Ctrl.modal = '';
  Ctrl.de = 'recursiveTetrahedral';
  Ctrl.modulusc = [0, 0, 0];
  Ctrl.modulus = [0, 0, 0];
  Ctrl.modulusm = [1, 0, 0, 0, 1, 0, 0, 0, 1];
  Ctrl.radius = 1;
  Ctrl.scale = 2;
  Ctrl.iterations = 13;
  Ctrl.rotationA = 0;
  Ctrl.rotationB = 0;
  Ctrl.center = [0.5, 0.5, 0.5];
  Ctrl.tolerance = 0.00025;
  Ctrl.maxSteps = 100;
  Ctrl.normalDiff = 0.0125;
  Ctrl.camera = [1, -3.0, 1.5];
  Ctrl.focusM = 'Direction';
  Ctrl.focus = [-0.25, 1.0, -0.5];
  Ctrl.lightP = [2.2, -1.3, 2.5];
  Ctrl.lightC = [0.75, 0.5, 1, 20.0];
  Ctrl.ambient = [1, 0.75, 0.75, 1];
  Ctrl.softness = 0;
  Ctrl.ss = 1;
  Ctrl.shine = 1;
  Ctrl.albedo = [0.2, 1, 1];

  const FLOAT32 = 2;

  function initShaderProgram(gl, vsSource, fsSource) {
    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);
    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);

    // Create the shader program

    const shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    // If creating the shader program failed, alert

    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
      alert(
        "Unable to initialize the shader program: " +
        gl.getProgramInfoLog(shaderProgram)
      );
      return null;
    }

    return shaderProgram;
  }

  function loadShader(gl, type, source) {
    const shader = gl.createShader(type);

    // Send the source to the shader object

    gl.shaderSource(shader, source);

    // Compile the shader program

    gl.compileShader(shader);

    // See if it compiled successfully

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      alert(
        "An error occurred compiling the shaders: " +
        gl.getShaderInfoLog(shader)
      );
      gl.deleteShader(shader);
      return null;
    }

    return shader;
  }

  function CanvasWebGL(cname, canvas, options) {
    var gl;
    var programs = {};

    /*
    console.log(
      Object.assign(
        {
          name: cname
        },
        options
      )
    );
    //*/

    if (canvas) {
      if (options.width) canvas.width = options.width;
      if (options.height) canvas.height = options.height;
      /*
      console.log({
        width: canvas.width,
        height: canvas.height
      });
      //*/
      gl = canvas.getContext("webgl");
    }
    Object.defineProperties(this, {
      canvas: {
        get: () => canvas,
        set: v => {
          canvas = v;
          if (!canvas) {
            gl = canvas.getContext("webgl");
          }
          else {
            gl = null;
          }
        }
      },
      gl: {
        get: () => gl
      }
    });

    this.registerProgram = (name, program) => {
      //console.log(`${cname}: registerProgram(${name})`);
      programs[name] = program;
      if (gl) {
        //console.log(`${cname}: initializing program ${name}`);
        program.initializeProgram(gl);
        program.queryLocations(gl);
        program.initializeBuffers(gl);
        program.initializeTextures(gl);
      }
    };
    this.draw = name => {
      if (gl) {
        if (!name) name = this.main;
        if (!name) name = "main";
        //console.log(`drawing program ${name}`);
        var program = programs[name];
        if (program) program.draw(gl);
        //else console.log("program is null");
      }
    };
  }

  function Program(
    vertexShaderSource,
    fragmentShaderSource,
    attributeNames,
    uniformNames,
    bufferNames,
    textureNames,
    draw
  ) {
    var program;
    var attributes = {},
      uniforms = {};
    var buffers = {},
      textures = {};

    this.initializeProgram = gl => {
      //console.log("initializing shaders");
      program = initShaderProgram(gl, vertexShaderSource, fragmentShaderSource);
      /*
      console.log(
        vertexShaderSource
          .split(/\n/g)
          .map((line, i) => ("00" + (i + 1)).substr(-2, 2) + ": " + line)
          .join("\n")
      );
      console.log(
        fragmentShaderSource
          .split(/\n/g)
          .map((line, i) => ("00" + (i + 1)).substr(-2, 2) + ": " + line)
          .join("\n")
      );
      //*/
    };
    this.queryLocations = gl => {
      //console.log("initializing locations");
      //console.log("initializing attributes");
      Object.keys(attributeNames).forEach(key => {
        var meta = attributeNames[key];
        let { name } = meta;
        var attribute = gl.getAttribLocation(program, name);
        var metakey = `a${key.substr(0, 1).toUpperCase()}${key.substr(
          1,
          99
        )}Meta`;
        key = `a${key.substr(0, 1).toUpperCase()}${key.substr(1, 99)}`;
        /*
        console.log({
          key,
          metakey
        });
        //*/
        this[metakey] = meta;
        this[key] = attribute;
        attributes[key] = attribute;
      });
      //console.log("initializing uniforms");
      Object.keys(uniformNames).forEach(key => {
        var meta = uniformNames[key];
        let { name } = meta;
        var uniform = gl.getUniformLocation(program, name);
        var metakey = `u${key.substr(0, 1).toUpperCase()}${key.substr(
          1,
          99
        )}Meta`;
        key = `u${key.substr(0, 1).toUpperCase()}${key.substr(1, 99)}`;
        this[metakey] = meta;
        this[key] = uniform;
        uniforms[key] = uniform;
      });
    };
    this.initializeBuffers = gl => {
      //console.log("initializing buffers");
      Object.keys(bufferNames).forEach(key => {
        var meta = bufferNames[key];
        let { data, datatype, target, usage, attribute: aKey } = meta;
        var buffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        var Data;
        switch (datatype) {
          case FLOAT32:
            Data = new Float32Array(data);
            break;
        }
        gl.bufferData(gl[target], Data, gl[usage]);
        var metakey = `b${key.substr(0, 1).toUpperCase()}${key.substr(
          1,
          99
        )}Meta`;
        key = `b${key.substr(0, 1).toUpperCase()}${key.substr(1, 99)}`;
        /*
        console.log({
          key,
          metakey,
          datatype,
          data,
          Data
        });
        //*/
        this[metakey] = meta;
        this[key] = buffer;
        buffers[key] = buffer;
        if (aKey) {
          var attributeKey = `a${aKey.substr(0, 1).toUpperCase()}${aKey.substr(
            1,
            99
          )}`;
          /*
          console.log({
            attributeKey
          });
          //*/
          var attributeMeta = this[attributeKey + "Meta"];
          attributeMeta.buffer = key;
          //console.log(this[attributeKey + "Meta"]);
        }
      });
    };
    this.initializeTextures = gl => {
      //console.log("initializing textures");
      Object.keys(textureNames).forEach(key => {
        var meta = textureNames[key];
        let { image, type } = meta;
        var texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl[type], image);
        var metakey = `t${key.substr(0, 1).toUpperCase()}${key.substr(
          1,
          99
        )}Meta`;
        key = `t${key.substr(0, 1).toUpperCase()}${key.substr(1, 99)}`;
        this[metakey] = meta;
        this[key] = texture;
        textures[key] = texture;
      });
    };
    this.pushAttribute = (gl, key) => {
      var attribute = this[
        `a${key.substr(0, 1).toUpperCase()}${key.substr(1, 99)}`
      ];
      var attributeMeta = this[
        `a${key.substr(0, 1).toUpperCase()}${key.substr(1, 99)}Meta`
      ];
      var buffer = this[attributeMeta.buffer];
      var bufferMeta = this[attributeMeta.buffer + "Meta"];
      /*
      console.log(
        `pushing buffer ${attributeMeta.buffer} to attribute ${`a${key
          .substr(0, 1)
          .toUpperCase()}${key.substr(1, 99)}`}`
      );
      console.log({
        attributeMeta,
        bufferMeta,
        attribute,
        buffer
      });
      //*/
      const { numComponents, type, normalize, stride, offset } = bufferMeta;
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
      gl.vertexAttribPointer(
        attribute,
        numComponents,
        gl[type],
        normalize,
        stride,
        offset
      );
      gl.enableVertexAttribArray(attribute);
    };
    this.draw = gl => {
      //console.log("preparing to draw");
      if (draw) {
        //console.log("drawing");
        draw.call(this, gl);
      }
    };

    Object.defineProperties(this, {
      program: {
        get: () => program
      }
    });
  }

  function Fractal(paramConfig, DE) {
    var F = this;
    var defaultConfig = {
      positionAttribute: "aVertexPosition",
      cameraAttribute: "aCam",
      cameraVarying: "vCam",
      cameraUniform: "uCam",
      precision: "highp",
      repeatName: "repeat",
      deFuncName: "DE",
      marchFuncName: "march",
      maxSteps: 10,
      toleranceVarName: "tolerance",
      normalDiff: "0.0125"
    };
    var config = paramConfig ?
      Object.assign({}, defaultConfig, paramConfig) :
      Object.assign({}, defaultConfig);
    F.vertexShader = () => {
      let {
        positionAttribute,
        cameraAttribute,
        cameraVarying,
        precision
      } = config;
      return `attribute vec4 ${positionAttribute};
attribute vec2 ${cameraAttribute};
varying ${precision} vec2 ${cameraVarying};
void main() {
  gl_Position = ${positionAttribute};
  ${cameraVarying} = ${cameraAttribute};
}`;
    };
    F.uniforms = () => {
      let { cameraUniform, toleranceVarName } = config;
      return `uniform vec3 ${cameraUniform};
uniform float ${cameraUniform}L;
uniform vec3 ${cameraUniform}Y;
uniform vec3 ${cameraUniform}Z;
uniform vec2 ${cameraUniform}V;
uniform float ${toleranceVarName};
uniform vec3 repeatBase;
uniform mat3 repeatDir;
uniform vec3 repeatSpace;
uniform vec3 lightP;
uniform vec4 lightC;
uniform vec4 ambientC;
uniform float softness;
uniform float ss;
uniform float shine;
uniform vec3 albedo;`;
    };
    F.repeatDec = () => {
      let { repeatName } = config;
      return `vec3 ${repeatName}(vec3 p, vec3 b, vec3 d, float s);`;
    };
    F.repeatDef = () => {
      let {
        repeatName
      } = config;
      return `vec3 ${repeatName}(vec3 p, vec3 b, vec3 d, float s) {
  d = normalize(d);
  vec3 r = p - b;
  float fa = dot(r, d);
  return r + (mod(fa, s) - fa) * d + b;
}`;
    };
    F.deDec = () => {
      let { deFuncName } = config;
      return `float ${deFuncName}(vec3 p, vec3 d);`;
    };
    F.deDef = () => {
      return DE;
    };
    F.marchDec = () => {
      let { marchFuncName } = config;
      return `vec4 ${marchFuncName}(vec3 start, vec3 dir, float tolerance, vec3 rb, mat3 rd, vec3 rs);`;
    };
    F.marchDef = () => {
      let { deFuncName, marchFuncName, maxSteps, repeatName } = config;
      return `vec4 ${marchFuncName}(vec3 start, vec3 dir, float tolerance, vec3 rb, mat3 rd, vec3 rs) {
  float dis = 0.0;
  int steps = -1;
  for(int i = 0; i < ${maxSteps}; i++) {
    vec3 p = start + dis * dir;
    if(rs.x > 0.001)
      p = ${repeatName}(p, rb, rd[0], rs.x);
    if(rs.y > 0.001)
      p = ${repeatName}(p, rb, rd[1], rs.y);
    if(rs.z > 0.001)
      p = ${repeatName}(p, rb, rd[2], rs.z);
    float d = ${deFuncName}(p, dir);
    dis += d;
    if(steps < 0 && d < tolerance) {
      steps = i;
    }
  }
  if(steps < 0)
    return vec4(0.0, 0.0, 0.0, 0.0);
  return vec4(start + dis * dir, 1.0 - float(steps) / ${maxSteps}.0);
}`;
    };
    F.declarations = () => {
      let { cameraVarying, precision } = config;
      return `#define PI 3.1415926535897932384626433832795
precision ${precision} float;
${F.uniforms()}
${F.repeatDec()}
${F.deDec()}
${F.marchDec()}
varying vec2 ${cameraVarying};`;
    };
    F.position = () => {
      let {
        cameraVarying,
        cameraUniform,
        marchFuncName,
        toleranceVarName
      } = config;
      return `vec3 cy = normalize(${cameraUniform}Y);
  vec3 cx = normalize(cross(cy, ${cameraUniform}Z));
  vec3 cz = normalize(cross(cx, cy));
  vec3 cp = ${cameraUniform} + ${cameraUniform}L * cy;
  cp = ${cameraUniform} + 0.25 * cy;
  vec2 fov = sin(${cameraUniform}V / 2.0);
  fov = vec2(0.25, 0.25);
  cp += fov.x * ${cameraVarying}.x * cx + fov.y * ${cameraVarying}.y * cz;
  vec4 m = ${marchFuncName}(${cameraUniform}, normalize(cp - ${cameraUniform}), ${toleranceVarName}, repeatBase, repeatDir, repeatSpace);`;
    };
    F.normal = () => {
      let { normalDiff } = config;
      return `vec3 xDir = vec3(1.0, 0.0, 0.0);
    vec3 yDir = vec3(0.0, 1.0, 0.0);
    vec3 zDir = vec3(0.0, 0.0, 1.0);
    vec3 origin = vec3(0.0, 0.0, 0.0);
    float d = ${normalDiff};
    vec3 n = normalize(vec3(DE(m.xyz + d * xDir, origin)-DE(m.xyz - d * xDir, origin), DE(m.xyz + d * yDir, origin)-DE(m.xyz - d * yDir, origin), DE(m.xyz + d * zDir, origin)-DE(m.xyz - d * zDir, origin)));
    vec3 nt = cross(n, vec3(1.0, 0.0, 0.0));
    if(length(nt) < 0.1) nt = cross(n, vec3(0.0, 1.0, 0.0));`;
    };
    F.lightpath = () => {
      let { cameraUniform } = config;
      return `vec4 lp = vec4(lightP - m.xyz, 1.0);
    lp.w = length(lp.xyz);
    lp.xyz = normalize(lp.xyz);
    vec2 incident = vec2(dot(n, lp.xyz), dot(lp.xyz - dot(n, lp.xyz) * n, nt));
    vec3 reflected = 2.0 * incident.x * n - lp.xyz;
    vec4 cp = vec4(${cameraUniform} - m.xyz, 1.0);
    cp.w = length(cp.xyz);
    cp.xyz = normalize(cp.xyz);
    vec2 recieving = vec2(dot(n, cp.xyz), dot(cp.xyz - dot(n, cp.xyz) * n, nt));`;
    };
    F.shadow = () => {
      let { toleranceVarName, marchFuncName } = config;
      return `float s = 1.0;
    /*float t = 0.01;
    for(int i = 0; i < 100; i++)
    {
      float h = DE(m.xyz + lp.xyz*t, lp.xyz);
      if( h<${toleranceVarName} )
        s = 0.0;
      else
        s = min( s, softness*h/t );
      t += h;
    }*/
    vec4 lm = ${marchFuncName}(m.xyz + 0.01 * lp.xyz, lp.xyz, ${toleranceVarName}, vec3(0.0), mat3(0.0), vec3(0.0));
    if(lm.a > 0.0) s = 0.0;`;
    };
    F.energy = () => {
      return `float e = lightC.a * s / (PI * pow(lp.w, 2.0));`;
    };
    F.lambert = () => {
      return `vec3 lambert = max(vec3(0.0, 0.0, 0.0), incident.x * lightC.rgb * e);`;
    };
    F.orennayar = () => {
      return `vec2 greek = vec2(max(acos(incident.x), acos(recieving.x)), min(acos(incident.x), acos(recieving.x)));
    vec2 latin = vec2(1.0 - 0.5 * ss / (ss + 0.33), 0.45 * ss / (ss + 0.09));
    vec3 orennayar = max(vec3(0.0, 0.0, 0.0), e * lightC.rgb * incident.x * (latin.x + latin.y * max(0.0, cos(acos(incident.y) - acos(recieving.y))) * sin(greek.x) * tan(greek.y)));`;
    };
    F.phong = () => {
      return `vec3 phong = max(vec3(0.0, 0.0, 0.0), pow(dot(reflected, cp.xyz), shine) * e * incident.x);`;
    };
    var vectorColor = (vname, center, scale) => {
      return `vec3((${vname}.x - ${center[0]}) / ${
        scale[0]
      } + 0.5, (${vname}.y - ${center[1]}) / ${scale[1]} + 0.5, (${vname}.z - ${
        center[2]
      }) / ${scale[2]} + 0.5)`;
    };
    F.debugShader = () => {
      let {
        cameraVarying,
        cameraUniform,
        marchFuncName,
        toleranceVarName
      } = config;
      return `${F.declarations()}
void main() {
  vec3 cy = normalize(${cameraUniform}Y);
  vec3 cx = normalize(cross(cy, ${cameraUniform}Z));
  vec3 cz = normalize(cross(cx, cy));
  vec3 cp = ${cameraUniform} + ${cameraUniform}L * cy;
  cp = ${cameraUniform} + 0.25 * cy;
  vec2 fov = 0.25 * tan(${cameraUniform}V / 2.0);
  fov = vec2(0.25, 0.25);
  cp += fov.x * ${cameraVarying}.x * cx + fov.y * ${cameraVarying}.y * cz;
  vec3 dir = normalize(cp - ${cameraUniform});
  //vec4 m = ${marchFuncName}(${cameraUniform}, dir, ${toleranceVarName});
  //gl_FragColor = vec4(${vectorColor(
    "cx",
    ["0.0", "0.0", "0.0"],
    ["2.0", "2.0", "2.0"]
  )}, 1.0);
  //gl_FragColor = vec4(${vectorColor(
    cameraUniform,
    ["0.0", "0.0", "0.0"],
    ["2.0", "2.0", "2.0"]
  )}, 1.0);
  //gl_FragColor = vec4(${vectorColor(
    "cp",
    ["0.0", "0.0", "0.0"],
    ["2.0", "2.0", "2.0"]
  )}, 1.0);
  gl_FragColor = vec4(${vectorColor(
    "dir",
    ["0.0", "0.0", "0.0"],
    ["2.0", "2.0", "2.0"]
  )}, 1.0);
  //gl_FragColor = vec4(m.w, m.w, m.w, 1.0);
}
${F.deDef()}
${F.marchDef()}`;
    };
    F.iterationsShader = () => {
      return `${F.declarations()}
void main() {
  ${F.position()}
  gl_FragColor = vec4(m.w, m.w, m.w, 1.0);
}
${F.deDef()}
${F.marchDef()}
${F.repeatDef()}`;
    };
    F.positionsShader = () => {
      return `${F.declarations()}
void main() {
  ${F.position()}
  if(m.w > 0.001 && length(m.xyz) > 0.001) {
    m = normalize(m);
    gl_FragColor = vec4(${vectorColor(
      "m",
      ["0.0", "0.0", "0.0"],
      ["2.0", "2.0", "2.0"]
    )} * m.w, 1.0);
  }
  else
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
}
${F.deDef()}
${F.marchDef()}
${F.repeatDef()}`;
    };
    F.normalShader = () => {
      return `${F.declarations()}
void main() {
  ${F.position()}
  if(m.w > 0.001 && length(m.xyz) > 0.001) {
    ${F.normal()}
    gl_FragColor = vec4(${vectorColor(
      "n",
      ["0.0", "0.0", "0.0"],
      ["2.0", "2.0", "2.0"]
    )} * m.w, 1.0);
  }
  else
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
}
${F.deDef()}
${F.marchDef()}
${F.repeatDef()}`;
    };
    F.lightpathShader = () => {
      return `${F.declarations()}
void main() {
  ${F.position()}
  if(m.w > 0.001 && length(m.xyz) > 0.001) {
    vec3 lp = normalize(lightP - m.xyz);
    gl_FragColor = vec4(${vectorColor(
      "lp",
      ["0.0", "0.0", "0.0"],
      ["2.0", "2.0", "2.0"]
    )} * m.w, 1.0);
  }
  else
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
}
${F.deDef()}
${F.marchDef()}
${F.repeatDef()}`;
    };
    F.fragmentShader = () => {
      return `${F.declarations()}
void main() {
  ${F.position()}
  if(m.w > 0.001 && length(m.xyz) > 0.001) {
    ${F.normal()}
    ${F.lightpath()}
    ${F.shadow()}
    ${F.energy()}
    ${F.lambert()}
    ${F.orennayar()}
    ${F.phong()}
    gl_FragColor = vec4((albedo.y * orennayar + albedo.z * phong + albedo.x * ambientC.rgb * ambientC.a) * m.w, 1.0);
  }
  else
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
}
${F.deDef()}
${F.marchDef()}
${F.repeatDef()}`;
    };
    Object.defineProperty(F, "config", {
      get: () => config,
      set: v => {
        config = paramConfig ?
          Object.assign({}, defaultConfig, paramConfig) :
          Object.assign({}, defaultConfig);
      }
    });
    Object.keys(defaultConfig).forEach(prop => {
      Object.defineProperty(F, prop, {
        get: () => config[prop],
        set: v => {
          config[prop] = v ? v : defaultConfig[prop];
        }
      });
    });
  }

  const sphereDE = R => {
    return `float DE(vec3 p, vec3 d) {
  return length(p) - ${R};
}`;
  };
  const recursiveTetrahedral = (Scale, Iterations, Ra, Rb, c) => {
    return `float DE(vec3 z, vec3 d)
{
  vec3 n1 = normalize(vec3(1.0,1.0,0.0));
  vec3 n2 = normalize(vec3(0.0,1.0,1.0));
  vec3 n3 = normalize(vec3(1.0,0.0,1.0));
  mat3 Ra = mat3(
    cos(${Ra}), sin(${Ra}), 0.0,
    -sin(${Ra}), cos(${Ra}), 0.0,
    0.0, 0.0, 1.0
  );
  mat3 Rb = mat3(
    cos(${Rb}), sin(${Rb}), 0.0,
    -sin(${Rb}), cos(${Rb}), 0.0,
    0.0, 0.0, 1.0
  );
  for(int n = 0; n < ${Iterations}; n++) {
    z = Ra * z;
    z -= 2.0 * min(0.0, dot(z, n1)) * n1;
    z -= 2.0 * min(0.0, dot(z, n2)) * n2;
    z -= 2.0 * min(0.0, dot(z, n3)) * n3;
    z = Rb * z;
    z = ${Scale} * (z - ${c});
  }
  return length(z) * pow(${Scale}, -${Iterations}.0);
}`;
  };
  const recursiveOctahedral = (Scale, Iterations, Ra, Rb, c) => {
    return `float DE(vec3 z, vec3 d)
{
  vec3 n1 = normalize(vec3(1.0,1.0,0.0));
  vec3 n2 = normalize(vec3(0.0,1.0,1.0));
  vec3 n3 = normalize(vec3(1.0,0.0,1.0));
  vec3 n4 = normalize(vec3(-1.0,1.0,0.0));
  vec3 n5 = normalize(vec3(0.0,-1.0,1.0));
  vec3 n6 = normalize(vec3(1.0,0.0,-1.0));
  mat3 Ra = mat3(
    cos(${Ra}), sin(${Ra}), 0.0,
    -sin(${Ra}), cos(${Ra}), 0.0,
    0.0, 0.0, 1.0
  );
  mat3 Rb = mat3(
    cos(${Rb}), sin(${Rb}), 0.0,
    -sin(${Rb}), cos(${Rb}), 0.0,
    0.0, 0.0, 1.0
  );
  for(int n = 0; n < ${Iterations}; n++) {
    z = Ra * z;
    z -= 2.0 * min(0.0, dot(z, n1)) * n1;
    z -= 2.0 * min(0.0, dot(z, n2)) * n2;
    z -= 2.0 * min(0.0, dot(z, n3)) * n3;
    z -= 2.0 * min(0.0, dot(z, n4)) * n4;
    z -= 2.0 * min(0.0, dot(z, n5)) * n5;
    z -= 2.0 * min(0.0, dot(z, n6)) * n6;
    z = Rb * z;
    z = ${Scale} * (z - ${c});
  }
  return length(z) * pow(${Scale}, -${Iterations}.0);
}`;
  };
  const recursiveIcoscahedral = (Scale, Iterations, Ra, Rb, c) => {
    return `float DE(vec3 z, vec3 d)
{
  float phi = (sqrt(5.0) - 1.0) / 2.0;
  vec3 a = normalize(vec3(phi,1.0,0.0));
  vec3 b = normalize(vec3(0.0,phi,1.0));
  vec3 c = normalize(vec3(1.0,0.0,phi));
  vec3 n7 = normalize(cross(a, b));
  vec3 n8 = normalize(cross(b, c));
  vec3 n9 = normalize(cross(c, a));
  mat3 Ra = mat3(
    cos(${Ra}), sin(${Ra}), 0.0,
    -sin(${Ra}), cos(${Ra}), 0.0,
    0.0, 0.0, 1.0
  );
  mat3 Rb = mat3(
    cos(${Rb}), sin(${Rb}), 0.0,
    -sin(${Rb}), cos(${Rb}), 0.0,
    0.0, 0.0, 1.0
  );
  for(int n = 0; n < ${Iterations}; n++) {
    z = Ra * z;
    d = Ra * d;
    if(z.x < 0.0)
      d.x *= -1.0;
    if(z.y < 0.0)
      d.y *= -1.0;
    if(z.z < 0.0)
      d.z *= -1.0;
    z = abs(z);
    if(dot(z, n7) < 0.0)
      d -= 2.0 * dot(d, n7) * n7;
    z -= 2.0 * min(0.0, dot(z, n7)) * n7;
    if(dot(z, n8) < 0.0)
      d -= 2.0 * dot(d, n8) * n8;
    z -= 2.0 * min(0.0, dot(z, n8)) * n8;
    if(dot(z, n9) < 0.0)
      d -= 2.0 * dot(d, n9) * n9;
    z -= 2.0 * min(0.0, dot(z, n9)) * n9;
    z = Rb * z;
    d = Rb * d;
    z = ${Scale} * (z - ${c});
  }
  return length(z) * pow(${Scale}, -${Iterations}.0);
}`;
  };
  const icoscahedral = R => {
    return `float DE(vec3 z, vec3 d)
{
  float phi = (sqrt(5.0) - 1.0) / 2.0;
  vec3 a = normalize(vec3(phi,1.0,0.0));
  vec3 b = normalize(vec3(0.0,phi,1.0));
  vec3 c = normalize(vec3(1.0,0.0,phi));
  vec3 p = ${R} * (a + b + c) / 3.0;
  vec3 n = normalize(p);
  vec3 n7 = normalize(cross(a, b));
  vec3 n8 = normalize(cross(b, c));
  vec3 n9 = normalize(cross(c, a));
  z = abs(z);
  z -= 2.0 * min(0.0, dot(z, n7)) * n7;
  z -= 2.0 * min(0.0, dot(z, n8)) * n8;
  z -= 2.0 * min(0.0, dot(z, n9)) * n9;
  return dot(z - p, n);
}`;
  };
  const mandelbulb = (Power, Iterations, Bailout) => {
    return `float DE(vec3 pos) {
  vec3 z = pos;
  float dr = 1.0;
  float r = 0.0;
  float br = -1.0;
  float b = ${Bailout};
  for (int i = 0; i < ${Iterations} ; i++) {
    r = length(z);
    if (r>b && br < 0.0) br = r;
    // convert to polar coordinates
    float theta = acos(z.z/r);
    float phi = atan(z.y,z.x);
    dr = pow( r, ${Power}-1.0)*${Power}*dr + 1.0;
    // scale and rotate the point
    float zr = pow( r,${Power});
    theta = theta*${Power};
    phi = phi*${Power};
    // convert back to cartesian coordinates
    z = zr*vec3(sin(theta)*cos(phi),
    sin(phi)*sin(theta), cos(theta));
    z+=pos;
  }
  if(br < 0.0) br = r;
  return 0.5*log(br)*br/dr;
}`;
  };
  //var lightP = [2.5, -1.5, 2.0];
  //var lightP = [0.5, -5.0, 1.0];

  var attributes = {
    positions: {
      name: "aVertexPosition"
    },
    camera: {
      name: "aCam"
    }
  };
  var uniforms = {
    camera: {
      name: "uCam"
    },
    cameraLength: {
      name: "uCamL"
    },
    cameraY: {
      name: "uCamY"
    },
    cameraZ: {
      name: "uCamZ"
    },
    cameraFOV: {
      name: "uCamV"
    },
    tolerance: {
      name: "tolerance"
    },
    lightP: {
      name: "lightP"
    },
    lightC: {
      name: "lightC"
    },
    ambientC: {
      name: "ambientC"
    },
    softness: {
      name: "softness"
    },
    ss: {
      name: "ss"
    },
    shine: {
      name: "shine"
    },
    albedo: {
      name: "albedo"
    },
    repeatBase: {
      name: "repeatBase"
    },
    repeatDir: {
      name: "repeatDir"
    },
    repeatSpace: {
      name: "repeatSpace"
    }
  };
  var buffers = {
    positions: {
      data: [1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0],
      datatype: FLOAT32,
      target: "ARRAY_BUFFER",
      usage: "STATIC_DRAW",
      attribute: "positions",
      numComponents: 2,
      type: "FLOAT",
      normalize: false,
      stride: 0,
      offset: 0
    },
    camera: {
      data: [1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0],
      datatype: FLOAT32,
      target: "ARRAY_BUFFER",
      usage: "STATIC_DRAW",
      attribute: "camera",
      numComponents: 2,
      type: "FLOAT",
      normalize: false,
      stride: 0,
      offset: 0
    }
  };
  var fragments = {
    fractal: 'fragmentShader',
    iterations: 'iterationsShader',
    positions: 'positionsShader',
    normal: 'normalShader',
    lightpath: 'lightpathShader'
  };

  function FractalCanvas(Ctrl) {
    switch (Ctrl.de) {
      case 'spheres':
        Ctrl.DE = sphereDE(
          Ctrl.radius.toFixed(3)
        );
        break;
      case 'recursiveTetrahedral':
        Ctrl.DE = recursiveTetrahedral(
          Ctrl.scale.toFixed(2),
          Ctrl.iterations,
          Ctrl.rotationA.toFixed(3),
          Ctrl.rotationB.toFixed(3),
          'vec3(' + Ctrl.center.map(c => c.toFixed(3)).join(',') + ')'
        );
        break;
      case 'recursiveOctahedral':
        Ctrl.DE = recursiveOctahedral(
          Ctrl.scale.toFixed(2),
          Ctrl.iterations,
          Ctrl.rotationA.toFixed(3),
          Ctrl.rotationB.toFixed(3),
          'vec3(' + Ctrl.center.map(c => c.toFixed(3)).join(',') + ')'
        );
        break;
      case 'recursiveIcoscahedral':
        Ctrl.DE = recursiveIcoscahedral(
          Ctrl.scale.toFixed(2),
          Ctrl.iterations,
          Ctrl.rotationA.toFixed(3),
          Ctrl.rotationB.toFixed(3),
          'vec3(' + Ctrl.center.map(c => c.toFixed(3)).join(',') + ')'
        );
        break;
      case 'icoscahedral':
        Ctrl.DE = icoscahedral(
          Ctrl.radius.toFixed(3)
        );
        break;
    }
    var fractal = new Fractal({
        maxSteps: Ctrl.maxSteps,
        normalDiff: Ctrl.normalDiff
      },
      Ctrl.DE
    );
    var draw = function(gl) {
      gl.clearColor(0.0, 0.0, 0.0, 1.0);
      gl.clearDepth(1.0);
      gl.enable(gl.DEPTH_TEST);
      gl.depthFunc(gl.LEQUAL);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

      this.pushAttribute(gl, "positions");
      this.pushAttribute(gl, "camera");

      gl.useProgram(this.program);

      gl.uniform3fv(this.uCamera, new Float32Array(Ctrl.camera));
      gl.uniform1f(this.uCameraL, 1.0);
      gl.uniform3fv(this.uCameraY, new Float32Array(Ctrl.focus));
      gl.uniform3fv(this.uCameraZ, new Float32Array([0.0, 0.0, 1.0]));
      gl.uniform2fv(
        this.uCameraV,
        new Float32Array([Math.PI / 2, Math.PI / 2])
      );
      gl.uniform1f(this.uTolerance, Ctrl.tolerance);
      gl.uniform3fv(this.uLightP, new Float32Array(Ctrl.lightP));
      gl.uniform4fv(this.uLightC, new Float32Array(Ctrl.lightC));
      gl.uniform4fv(this.uAmbientC, new Float32Array(Ctrl.ambient));
      gl.uniform1f(this.uSoftness, Ctrl.softness);
      gl.uniform1f(this.uSs, Ctrl.ss);
      gl.uniform1f(this.uShine, Ctrl.shine);
      gl.uniform3fv(this.uAlbedo, new Float32Array(Ctrl.albedo));
      gl.uniform3fv(this.uRepeatBase, new Float32Array(Ctrl.modulusc));
      gl.uniformMatrix3fv(this.repeatDir, false, new Float32Array(Ctrl.modulusm));
      gl.uniform3fv(this.uRepeatSpace, new Float32Array(Ctrl.modulus));

      {
        const offset = 0;
        const vertexCount = 4;
        gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);
      }
    };
    Object.keys(fragments).forEach(key => {
      var $canvas = $("#" + key);
      var cw = new CanvasWebGL(key, $canvas[0], {
        width: 1 << 10,
        height: 1 << 10
      });
      var fragment = fractal[fragments[key]]();
      if (true) {
        console.log(key);
        console.log(
          fragment
          .split(/\n/g)
          .map((line, i) => ("000" + (i + 1)).substr(-3, 3) + ": " + line)
          .join("\n")
        );
      }
      cw.registerProgram(
        "main",
        new Program(
          fractal.vertexShader(),
          fragment,
          attributes,
          uniforms,
          buffers, {},
          draw
        )
      );
      cw.draw();
      var $preview = $("#" + key + "-preview");
      $preview.attr("src", $canvas[0].toDataURL());
      $preview.addClass("active");
    });
  }
  Ctrl.preset = f => {
    if (f == 0) {
      Ctrl.de = 'recursiveIcoscahedral';
      Ctrl.modulusc = [0, 0, 0];
      Ctrl.modulus = [0, 0, 0];
      Ctrl.modulusm = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      Ctrl.scale = 2;
      Ctrl.iterations = 13;
      Ctrl.rotationA = 0.1;
      Ctrl.rotationB = -0.2;
      Ctrl.center = [0.6, 1.25 * 0.6, 0.6];
      Ctrl.tolerance = 0.00025;
      Ctrl.maxSteps = 100;
      Ctrl.normalDiff = 0.0125;
      Ctrl.camera = [1.0, -3.0, 1.5];
      Ctrl.focus = [-0.25, 1.0, -0.5];
      Ctrl.lightP = [2.2, -1.3, 2.5];
      Ctrl.lightC = [0.75, 0.5, 1.0, 20.0];
      Ctrl.ambient = [1.0, 0.75, 0.75, 1.0];
      Ctrl.ss = 1.0;
      Ctrl.shine = 1.0;
      Ctrl.albedo = [0.2, 0.5, 1.0];
    }
    else if (f == 1) {
      Ctrl.de = 'recursiveOctahedral';
      Ctrl.modulusc = [0, 0, 0];
      Ctrl.modulus = [0, 0, 0];
      Ctrl.modulusm = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      Ctrl.scale = 2;
      Ctrl.iterations = 13;
      Ctrl.rotationA = -0.5;
      Ctrl.rotationB = 0.6;
      Ctrl.center = [0.75, 0.5, 0.5];
      Ctrl.tolerance = 0.00025;
      Ctrl.maxSteps = 100;
      Ctrl.normalDiff = 0.005;
      Ctrl.camera = [1.0, -2.0, 1.0];
      Ctrl.focus = [-0.5, 1.0, -0.5];
      Ctrl.lightP = [5.0, -2.0, 2.5];
      Ctrl.lightC = [0.85, 0.6, 0.3, 99.999];
      Ctrl.ambient = [1.0, 0.75, 0.75, 1.0];
      Ctrl.ss = 1.0;
      Ctrl.shine = 50.0;
      Ctrl.albedo = [0.01, 1, 1];
    }
    else if (f == 2) {
      Ctrl.de = 'recursiveOctahedral';
      Ctrl.modulusc = [0, 0, 0];
      Ctrl.modulus = [0, 0, 0];
      Ctrl.modulusm = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      Ctrl.scale = 2;
      Ctrl.iterations = 13;
      Ctrl.rotationA = -0.5;
      Ctrl.rotationB = 0.3;
      Ctrl.center = [0.5, 0.5, 0.5];
      Ctrl.tolerance = 0.00025;
      Ctrl.maxSteps = 100;
      Ctrl.normalDiff = 0.0125;
      Ctrl.camera = [1.0, -2.0, 0.0];
      Ctrl.focus = [-0.5, 1.0, 0.0];
      Ctrl.lightP = [2.2, -1.3, 2.5];
      Ctrl.lightC = [0.75, 0.5, 1.0, 20.0];
      Ctrl.ambient = [1.0, 1.0, 1.0, 1.0];
      Ctrl.ss = 1.0;
      Ctrl.shine = 1.0;
      Ctrl.albedo = [1.0, 0.0, 0.0];
    }
    else if (f == 3) {
      Ctrl.de = 'spheres';
      Ctrl.modulusc = [0, 0, 0];
      Ctrl.modulus = [2.5,2.5,2.5];
      Ctrl.modulusm = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      Ctrl.radius = 1;
      Ctrl.tolerance = 0.0025;
      Ctrl.maxSteps = 100;
      Ctrl.normalDiff = 0.0125;
      Ctrl.camera = [0.0, 0.0, 5.0];
      Ctrl.focus = [1.0, 1.0, -1.0];
      Ctrl.lightP = [5, 7, 5];
      Ctrl.lightC = [0.75, 0.5, 1.0, 50.0];
      Ctrl.ambient = [1.0, 0.75, 0.75, 1.0];
      Ctrl.ss = 1.0;
      Ctrl.shine = 5;
      Ctrl.albedo = [0.2, 0.5, 1.0];
    }
    else if (f == 4) {
      Ctrl.de = 'recursiveOctahedral';
      Ctrl.modulusc = [0, 0, 0];
      Ctrl.modulus = [0, 0, 0];
      Ctrl.modulusm = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      Ctrl.scale = 2;
      Ctrl.iterations = 13;
      Ctrl.rotationA = 0.3;
      Ctrl.rotationB = 0.8;
      Ctrl.center = [0.5, 0.5, 0.25];
      Ctrl.tolerance = 0.00025;
      Ctrl.maxSteps = 100;
      Ctrl.normalDiff = 0.005;
      Ctrl.camera = [1.0, -2.0, 1.0];
      Ctrl.focus = [-0.5, 1.0, -0.5];
      Ctrl.lightP = [5.0, -2.0, 2.5];
      Ctrl.lightC = [0.75, 0.5, 1.0, 50.0];
      Ctrl.ambient = [1.0, 1.0, 1.0, 1.0];
      Ctrl.ss = 1.0;
      Ctrl.shine = 1.0;
      Ctrl.albedo = [1.0, 0.0, 0.0];
    }
    else if (f == 5) {
      Ctrl.de = 'icoscahedral';
      Ctrl.modulusc = [0, 0, 0];
      Ctrl.modulus = [2.5,2.5,2.5];
      Ctrl.modulusm = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      Ctrl.radius = 1;
      Ctrl.tolerance = 0.00025;
      Ctrl.maxSteps = 100;
      Ctrl.normalDiff = 0.0125;
      Ctrl.camera = [1.0, -3.0, 1.5];
      Ctrl.focus = [-0.25, 1.0, -0.5];
      Ctrl.lightP = [2.2, -1.3, 2.5];
      Ctrl.lightC = [0.75, 0.5, 1.0, 20.0];
      Ctrl.ambient = [1.0, 0.75, 0.75, 1.0];
      Ctrl.ss = 1.0;
      Ctrl.shine = 1.0;
      Ctrl.albedo = [0.2, 0.5, 1.0];
    }
  };
  //Ctrl.preset(0);
  Ctrl.presets = [
    'Arch',
    'Aster',
    'Orb',
    'Spheres',
    'Cloud',
    'Icosahedron'
  ];
  Ctrl.render = () => {
    FractalCanvas(Ctrl);
  };
  Ctrl.render();
  Ctrl.setActive = key => {
    var $canvas = $("#" + key);
    $canvas.addClass("active");
    $('#download').attr("href", $canvas[0].toDataURL());
    var $canvases = $("#canvases");
    if (
      $canvases.attr("data-active-canvas") &&
      $canvases.attr("data-active-canvas").length
    ) {
      $("#" + $canvases.attr("data-active-canvas")).removeClass("active");
    }
    $canvases.attr("data-active-canvas", key);
  };
  Ctrl.setActive("fractal");
});
