#app{'ng-app': 'app', 'ng-controller': 'Ctrl as c'}
  #modal{'ng-class': '{visible: c.modal.length}', 'ng-click': 'c.modal = ""'}
    .modal-content
      #modal-close-button{'ng-click': 'c.modal = ""'}
        %span.fa-sm.fa-fw.fa-layers
          %i.fas.fa-square
          %i.fas.fa-times{'data-fa-transform': 'shrink-6'}
      .modal-text{'ng-if': 'c.modal === "preview-type-fractal"'}
        %h2 Rendered Fractal
        %p
          This is the fully rendered image with the lighting, ambient occlusion and material properties applied.
      .modal-text{'ng-if': 'c.modal === "preview-type-iterations"'}
        %h2 Iterations
        %p
          This image shows the amount of steps taken to find the point on the fractal.  Lighter values correspond to points found in lesser numbers of steps.  This greyscale value is used as the ambient occlusion for the other images.
      .modal-text{'ng-if': 'c.modal === "preview-type-positions"'}
        %h2 Position Vector
        %p
          This image shows the normalized position vector for the points on the fractal.  The red green and blue channels correspond to the x, y and z xoordinates respectively.
      .modal-text{'ng-if': 'c.modal === "preview-type-normal"'}
        %h2 Normal Vector
        %p
          This image shows the normalized normal vector for the points on the fractal.  The red green and blue channels correspond to the x, y and z xoordinates respectively.
      .modal-text{'ng-if': 'c.modal === "preview-type-lightpath"'}
        %h2 Vector to Light
        %p
          This image shows the normalized vector pointing from the points on the fractal to the light source.  The red green and blue channels correspond to the x, y and z xoordinates respectively.
  %main
    %nav
      %header.bar.vertical
        %span.fa-sm.fa-fw.fa-layers
          %i.fas.fa-circle{style: 'color: white;'}
          %i.fas.fa-info{'data-fa-transform': 'shrink-6', style: 'color: black;'}
      .preview-image.tooltip-owner
        %img#fractal-preview{'ng-click': 'c.setActive("fractal")'}
        .tooltip.tooltip-right.preview-tooltip
          Rendered Fractal
          %p.center
            %span.fa-3x.fa-fw.fa-layers.link-text{'ng-click': 'c.modal = "preview-type-fractal"'}
              %i.fas.fa-circle{style: 'color: white;'}
              %i.fas.fa-info{'data-fa-transform': 'shrink-6', style: 'color: black;'}
      .preview-image.tooltip-owner
        %img#iterations-preview{'ng-click': 'c.setActive("iterations")'}
        .tooltip.tooltip-right.preview-tooltip
          Iterations
          %p.center
            %span.fa-3x.fa-fw.fa-layers.link-text{'ng-click': 'c.modal = "preview-type-iterations"'}
              %i.fas.fa-circle{style: 'color: white;'}
              %i.fas.fa-info{'data-fa-transform': 'shrink-6', style: 'color: black;'}
      .preview-image.tooltip-owner
        %img#positions-preview{'ng-click': 'c.setActive("positions")'}
        .tooltip.tooltip-right.preview-tooltip
          Position Vector
          %p.center
            %span.fa-3x.fa-fw.fa-layers.link-text{'ng-click': 'c.modal = "preview-type-positions"'}
              %i.fas.fa-circle{style: 'color: white;'}
              %i.fas.fa-info{'data-fa-transform': 'shrink-6', style: 'color: black;'}
      .preview-image.tooltip-owner
        %img#normal-preview{'ng-click': 'c.setActive("normal")'}
        .tooltip.tooltip-right.preview-tooltip
          Normal Vector
          %p.center
            %span.fa-3x.fa-fw.fa-layers.link-text{'ng-click': 'c.modal = "preview-type-normal"'}
              %i.fas.fa-circle{style: 'color: white;'}
              %i.fas.fa-info{'data-fa-transform': 'shrink-6', style: 'color: black;'}
      .preview-image.tooltip-owner
        %img#lightpath-preview{'ng-click': 'c.setActive("lightpath")'}
        .tooltip.tooltip-right.preview-tooltip
          Vector to Light
          %p.center
            %span.fa-3x.fa-fw.fa-layers.link-text{'ng-click': 'c.modal = "preview-type-lightpath"'}
              %i.fas.fa-circle{style: 'color: white;'}
              %i.fas.fa-info{'data-fa-transform': 'shrink-6', style: 'color: black;'}
    %section#canvases
      %canvas#iterations
      %canvas#positions
      %canvas#lightpath
      %canvas#normal
      %canvas#fractal
  %aside
    %form
      - vec3labels = ['x', 'y', 'z']
      - col4labels = ['r', 'g', 'b', 'str']
      .de
        .parameter#param-de
          %label{for: 'input-radius'} Distance Formula
          %select#input-de{'ng-model': 'c.de'}
            %option{value: 'spheres'} Spheres
            %option{value: 'icoscahedral'} Icoscahedral
            %option{value: 'recursiveTetrahedral'} Recursive Tetrahedral
            %option{value: 'recursiveOctahedral'} Recursive Octahedral
            %option{value: 'recursiveIcoscahedral'} Recursive Icoscahedral
        .parameter#param-radius{'ng-if': 'c.de === "spheres" || c.de === "icoscahedral"'}
          %label{for: 'input-radius'} Radius
          %input#input-radius{type: 'number', 'ng-model': 'c.radius', 'ng-min': '0.001', 'ng-max': '9.999', 'step': '0.001'}
        .parameter#param-modulus{'ng-if': 'c.de === "spheres"'}
          %label{for: 'input-modulus'} Spacing
          %input#input-modulus{type: 'number', 'ng-model': 'c.modulus', 'ng-min': '0.001', 'ng-max': '99.999', 'step': '0.001'}
        .parameter#param-scale{'ng-if': 'c.de === "recursiveTetrahedral" || c.de === "recursiveOctahedral" || c.de === "recursiveIcoscahedral"'}
          %label{for: 'input-scale'} Scale
          %input#input-scale{type: 'number', 'ng-model': 'c.scale', 'ng-min': '0.01', 'ng-max': '99.99', 'step': '0.01'}
        .parameter#param-iterations{'ng-if': 'c.de === "recursiveTetrahedral" || c.de === "recursiveOctahedral" || c.de === "recursiveIcoscahedral"'}
          %label{for: 'input-iterations'} Iterations
          %input#input-iterations{type: 'number', 'ng-model': 'c.iterations', 'ng-min': '1', 'ng-max': '99', 'step': '1'}
        .parameter#param-rotationa{'ng-if': 'c.de === "recursiveTetrahedral" || c.de === "recursiveOctahedral" || c.de === "recursiveIcoscahedral"'}
          %label{for: 'input-rotationa'} Rotation A
          %input#input-rotationa{type: 'number', 'ng-model': 'c.rotationA', 'ng-min': '-3.142', 'ng-max': '3.142', 'step': '0.001'}
        .parameter#param-rotationb{'ng-if': 'c.de === "recursiveTetrahedral" || c.de === "recursiveOctahedral" || c.de === "recursiveIcoscahedral"'}
          %label{for: 'input-rotationb'} Rotation B
          %input#input-rotationb{type: 'number', 'ng-model': 'c.rotationB', 'ng-min': '-3.142', 'ng-max': '3.142', 'step': '0.001'}
        .parameter#param-center.multi.vec3{'ng-if': 'c.de === "recursiveTetrahedral" || c.de === "recursiveOctahedral" || c.de === "recursiveIcoscahedral"'}
          %label Center
          .components
            - (0..2).each do |c|
              %label.vec3.component{for: "input-center#{c}"}= vec3labels[c]
              %input.vec3.component{id: "input-center#{c}", type: 'number', 'ng-model': "c.center[#{c}]", 'ng-min': '-9.999', 'ng-max': '9.999', 'step': '0.001'}
      .parameters
        .parameter#param-tolerance
          %label{for: 'input-tolerance'} Tolerance
          %input#input-tolerance{type: 'number', 'ng-model': 'c.tolerance', 'ng-min': '0.000000001', 'ng-max': '0.01', 'step': '0.000000001'}
        .parameter#param-maxsteps
          %label{for: 'input-maxsteps'} Maximum Steps
          %input#input-maxsteps{type: 'number', 'ng-model': 'c.maxSteps', 'ng-min': '10', 'ng-max': '10000', 'step': '1'}
        .parameter#param-normaldiff
          %label{for: 'input-normaldiff'} Normal Step
          %input#input-normaldiff{type: 'number', 'ng-model': 'c.normalDiff', 'ng-min': '0.00001', 'ng-max': '0.99999', 'step': '0.00001'}
        .parameter#param-camera.multi.vec3
          %label Camera Position
          .components
            - (0..2).each do |c|
              %label.vec3.component{for: "input-camera#{c}"}= vec3labels[c]
              %input.vec3.component{id: "input-camera#{c}", type: 'number', 'ng-model': "c.camera[#{c}]", 'ng-min': '-999.999', 'ng-max': '999.999', 'step': '0.001'}
        .parameter#param-focus.multi.vec3
          %label Camera Direction
          .components
            - (0..2).each do |c|
              %label.vec3.component{for: "input-focus#{c}"}= vec3labels[c]
              %input.vec3.component{id: "input-focus#{c}", type: 'number', 'ng-model': "c.focus[#{c}]", 'ng-min': '-999.999', 'ng-max': '999.999', 'step': '0.001'}
        .parameter#param-lightp.multi.vec3
          %label Light Position
          .components
            - (0..2).each do |c|
              %label.vec3.component{for: "input-lightp#{c}"}= vec3labels[c]
              %input.vec3.component{id: "input-lightp#{c}", type: 'number', 'ng-model': "c.lightP[#{c}]", 'ng-min': '-999.999', 'ng-max': '999.999', 'step': '0.001'}
        .parameter#param-lightc.multi.col4
          %label Light Color
          .components
            - (0..2).each do |c|
              %label.vec3.component{for: "input-lightc#{c}"}= col4labels[c]
              %input.vec3.component{id: "input-lightc#{c}", type: 'number', 'ng-model': "c.lightC[#{c}]", 'ng-min': '0', 'ng-max': '1', 'step': '0.001'}
            %label.vec3.component{for: "input-lightc3"} str
            %input.vec3.component{id: "input-lightc3", type: 'number', 'ng-model': "c.lightC[3]", 'ng-min': '0', 'ng-max': '99.999', 'step': '0.001'}
        .parameter#param-ambient.multi.col4
          %label Ambient Color
          .components
            - (0..2).each do |c|
              %label.vec3.component{for: "input-ambient#{c}"}= col4labels[c]
              %input.vec3.component{id: "input-ambient#{c}", type: 'number', 'ng-model': "c.ambient[#{c}]", 'ng-min': '0', 'ng-max': '1', 'step': '0.001'}
            %label.vec3.component{for: "input-ambient3"} str
            %input.vec3.component{id: "input-ambient3", type: 'number', 'ng-model': "c.ambient[3]", 'ng-min': '0', 'ng-max': '99.999', 'step': '0.001'}
        .parameter#param-softness{'ng-if': 'false'}
          %label{for: 'input-softness'} Softness
          %input#input-tolerance{type: 'number', 'ng-model': 'c.softness'}
        .parameter#param-ss
          %label{for: 'input-ss'} Diffuse Roughness
          %input#input-ss{type: 'number', 'ng-model': 'c.ss', 'ng-min': '0.001', 'ng-max': '9999', 'step': '0.001'}
        .parameter#param-shine
          %label{for: 'input-shine'} Shininess
          %input#input-shine{type: 'number', 'ng-model': 'c.shine', 'ng-min': '0.01', 'ng-max': '99', 'step': '0.01'}
        - albedolabels = ['ambient', 'diffuse', 'specular']
        .parameter#param-albedo.multi.arr3
          %label Albedo
          .components.arr3
            - (0..2).each do |c|
              %p
                %label.arr3.component{for: "input-albedo#{c}"}= albedolabels[c]
                %input.arr3.component{id: "input-albedo#{c}", type: 'number', 'ng-model': "c.albedo[#{c}]", 'ng-min': '0', 'ng-max': '1', 'step': '0.001'}
      #presets
        %button.preset{'ng-click': 'c.preset($index)', 'ng-repeat': 'preset in c.presets'} {{preset}}
      %button#render{'ng-click': 'c.render()'} Render
      %a#download.button{download: 'fractal'} Download