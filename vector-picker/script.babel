angular
  .module('vectorPicker', ['ngMessages'])
  .factory('Rect', function() {
    function Rect(_x, _y) {
      var x = parseFloat(_x);
      var y = parseFloat(_y);
      Object.defineProperties(this, {
        t: {
          get: () => `rect`
        },
        d: {
          get: () => 2
        },
        length: {
          get: () => 2
        },
        x: {
          get: () => x,
          set: v => {
            x = parseFloat(v);
          }
        },
        0: {
          get: () => x,
          set: v => {
            x = parseFloat(v);
          }
        },
        y: {
          get: () => y,
          set: v => {
            y = parseFloat(v);
          }
        },
        1: {
          get: () => y,
          set: v => {
            y = parseFloat(v);
          }
        },
        modulus: {
          get: () => Math.sqrt(x * x + y * y),
          set: v => {
            var m = this.modulus;
            if (m != 0 && v != 0) {
              x *= v / m;
              y *= v / m;
            } else if (v == 0) {
              x = 0;
              y = 0;
            }
          }
        },
        argument: {
          get: () => Math.atan2(y, x),
          set: v => {
            var r = v - this.argument;
            var c = Math.cos(r),
              s = Math.sin(r);
            var t = c * x - s * y;
            y = s * x + c * y;
            x = t;
          }
        }
      });
      this.forEach = function(func, thisArg) {
        func.call(thisArg, x, 0, [x, y]);
        func.call(thisArg, y, 1, [x, y]);
      };
      this.map = function(func, thisArg) {
        return [
          func.call(thisArg, x, 0, [x, y]),
          func.call(thisArg, y, 1, [x, y])
        ];
      };
      this.reduce = function(func, initial) {
        return func.call(null, func.call(null, initial, x, 0, [x, y]), y, 1, [
          x,
          y
        ]);
      };
      this.reduceRight = function(func, initial) {
        return func.call(null, func.call(null, initial, y, 0, [x, y]), x, 1, [
          x,
          y
        ]);
      };
      this.every = function(func, thisArg) {
        return (
          func.call(thisArg, x, 0, [x, y]) && func.call(thisArg, y, 0, [x, y])
        );
      };
      this.fill = function(val, start, end) {
        if (start == undefined) start = 0;
        if (end == undefined) end = this.length;
        for (var i = 0; i < this.length; i++) this[i] = val;
      };
      this.reverse = function() {
        var t = x;
        x = y;
        y = t;
      };
      
      
    }
  
    Rect.sum = function(a, b) {
      return new Rect(a.x + b.x, a.y + b.y);
    }

    return Rect;
  })
  .factory('Polar', function() {
    function Polar(_r, _a) {
      var r = parseFloat(_r);
      var a = parseFloat(_a);
      Object.defineProperties(this, {
        t: {
          get: () => `rect`
        },
        d: {
          get: () => 2
        },
        length: {
          get: () => 2
        },
        x: {
          get: () => x,
          set: v => {
            x = parseFloat(v);
          }
        },
        0: {
          get: () => x,
          set: v => {
            x = parseFloat(v);
          }
        },
        y: {
          get: () => y,
          set: v => {
            y = parseFloat(v);
          }
        },
        1: {
          get: () => y,
          set: v => {
            y = parseFloat(v);
          }
        }
      });
      this.forEach = function(func, thisArg) {
        func.call(thisArg, x, 0, [x, y]);
        func.call(thisArg, y, 1, [x, y]);
      };
      this.map = function(func, thisArg) {
        return [
          func.call(thisArg, x, 0, [x, y]),
          func.call(thisArg, y, 1, [x, y])
        ];
      };
      this.reduce = function(func, initial) {
        return func.call(null, func.call(null, initial, x, 0, [x, y]), y, 1, [
          x,
          y
        ]);
      };
      this.reduceRight = function(func, initial) {
        return func.call(null, func.call(null, initial, y, 0, [x, y]), x, 1, [
          x,
          y
        ]);
      };
      this.every = function(func, thisArg) {
        return (
          func.call(thisArg, x, 0, [x, y]) && func.call(thisArg, y, 0, [x, y])
        );
      };
      this.fill = function(val, start, end) {
        if (start == undefined) start = 0;
        if (end == undefined) end = this.length;
        for (var i = 0; i < this.length; i++) this[i] = val;
      };
      this.reverse = function() {
        var t = x;
        x = y;
        y = t;
      };
    }

    return Polar;
  })
  .factory('Cartesian', function() {
    function Cartesian(x, y, z) {
      var x = parseFloat(_x);
      var y = parseFloat(_y);
      Object.defineProperties(this, {
        t: {
          get: () => `rect`
        },
        d: {
          get: () => 2
        },
        length: {
          get: () => 2
        },
        x: {
          get: () => x,
          set: v => {
            x = parseFloat(v);
          }
        },
        0: {
          get: () => x,
          set: v => {
            x = parseFloat(v);
          }
        },
        y: {
          get: () => y,
          set: v => {
            y = parseFloat(v);
          }
        },
        1: {
          get: () => y,
          set: v => {
            y = parseFloat(v);
          }
        }
      });
      this.forEach = function(func, thisArg) {
        func.call(thisArg, x, 0, [x, y]);
        func.call(thisArg, y, 1, [x, y]);
      };
      this.map = function(func, thisArg) {
        return [
          func.call(thisArg, x, 0, [x, y]),
          func.call(thisArg, y, 1, [x, y])
        ];
      };
      this.reduce = function(func, initial) {
        return func.call(null, func.call(null, initial, x, 0, [x, y]), y, 1, [
          x,
          y
        ]);
      };
      this.reduceRight = function(func, initial) {
        return func.call(null, func.call(null, initial, y, 0, [x, y]), x, 1, [
          x,
          y
        ]);
      };
      this.every = function(func, thisArg) {
        return (
          func.call(thisArg, x, 0, [x, y]) && func.call(thisArg, y, 0, [x, y])
        );
      };
      this.fill = function(val, start, end) {
        if (start == undefined) start = 0;
        if (end == undefined) end = this.length;
        for (var i = 0; i < this.length; i++) this[i] = val;
      };
      this.reverse = function() {
        var t = x;
        x = y;
        y = t;
      };
    }

    return Cartesian;
  })
  .factory('Cylindrical', function() {
    function Cylindrical(r, a, z) {}

    return Cylindrical;
  })
  .factory('Spherical', function() {
    function Spherical(r, a, b) {}

    return Spherical;
  })
  .factory('Homogeneous', function() {
    function Homogeneous(x, y, z, w) {}

    return Homogeneous;
  })
  .directive('isnumeric', function() {
    return {
      require: '^ngModel',
      link: function(âscope, âelement, âattrs, ângModelCtrl) {
        var isnumeric = function(value) {
          var valid = !!value.match(/^([0-9]+(\.[0-9]+)?)?$/);
          return valid;
        };
        ângModelCtrl.$parsers.push(val => {
          var valid = isnumeric(val);
          ângModelCtrl.$setValidity('isnumeric', valid);
          return valid ? val : undefined;
        });
        ângModelCtrl.$formatters.push(val => {
          ângModelCtrl.$setValidity('isnumeric', !isNaN(parseInt(val)));
          return val;
        });
      }
    };
  })
  .directive('inputBlender', function() {
    return {
      restrict: 'AE',
      templateUrl: "input-blender-template",
      replace: true,
      require: ['inputBlender', 'ngModel'],
      scope: {
        min: '@?',
        max: '@?',
        step: '@?',
        required: '@?',
        ngMin: '=?',
        ngMax: '=?',
        ngStep: '=?',
        ngRequired: '=?'
      },
      controller: function() {
      },
      controllerAs: 'ib',
      link: function(âscope, âelement, âattrs, âctrls) {
        let [
          âinputBlenderCtrl,
          ângModelCtrl,
        ] = âctrls;
        âinputBlenderCtrl.name = ângModelCtrl.$name;
        âinputBlenderCtrl.value = ângModelCtrl.$viewValue;
        ['min', 'max', 'step', 'required'].forEach(a => {
          var ngA = 'ng' + a.substr(0, 1).toUpperCase() + a.substr(1, -1);
          if(âscope[ngA] != undefined) {
            âinputBlenderCtrl[a] = âscope[ngA];
          }
          else if(âscope[a] != undefined) {
            âinputBlenderCtrl[a] = âscope[a];
          }
        });
        console.log({
          scope: âscope,
          ctrl: âinputBlenderCtrl
        });
        ângModelCtrl.$formatters.push(v => v);
        ângModelCtrl.$render = function() {
          âinputBlenderCtrl.value = ângModelCtrl.$viewValue;
        };
        ângModelCtrl.$parsers.push(v => v);
        âscope.$watch('ib.value', function() {
          ângModelCtrl.$setViewValue(âinputBlenderCtrl.value);
          var $error = ângModelCtrl.$$parentForm[ângModelCtrl.$name + '-val'].$error;
          console.log($error);
          [
            'isnumeric',
            'min',
            'max',
            'step',
            'required'
          ].forEach(key => {
            var valid = !$error[key];
            if(valid != undefined)
              ângModelCtrl.$setValidity(key, valid);
          });
        });
      }
    };
  })
  .directive('vectorRect', [
    'Rect',
    function(Rect) {
      return {
        restrict: 'E',
        templateUrl: 'vector-rect-template',
        scope: {
          vector: '='
        },
        controller: function($scope) {
          var Ctrl = this;
          
          Ctrl.vector = $scope.vector;
        },
        controllerAs: 'rp',
        link: function(âscope, âelement, âattrs, ângModelCtrl) {}
      };
    }
  ])
  .directive('vectorPolar', [
    'Polar',
    function(Polar) {
      return {
        restrict: 'E',
        templateUrl: 'vector-polar-template',
        link: function($scope, $element, $attrs) {}
      };
    }
  ])
  .directive('vectorD2', [
    'Rect',
    'Polar',
    function(Rect, Polar) {
      return {
        restrict: 'E',
        templateUrl: 'vector-2d-template',
        link: function($scope, $element, $attrs) {}
      };
    }
  ])
  .directive('vectorCartesian', [
    'Cartesian',
    function(Cartesian) {
      return {
        restrict: 'E',
        templateUrl: 'vector-cartesian-template',
        link: function($scope, $element, $attrs) {}
      };
    }
  ])
  .directive('vectorCylindrical', [
    'Cylindrical',
    function(Cylindrical) {
      return {
        restrict: 'E',
        templateUrl: 'vector-cylindrical-template',
        link: function($scope, $element, $attrs) {}
      };
    }
  ])
  .directive('vectorSpherical', [
    'Spherical',
    function(Spherical) {
      return {
        restrict: 'E',
        templateUrl: 'vector-spherical-template',
        link: function($scope, $element, $attrs) {}
      };
    }
  ])
  .directive('vectorD3', [
    'Cartesian',
    'Cylindrical',
    'Spherical',
    function(Cartesian, Cylindrical, Spherical) {
      return {
        restrict: 'E',
        templateUrl: 'vector-3d-template',
        link: function($scope, $element, $attrs) {}
      };
    }
  ])
  .directive('vectorHomogeneous', [
    'Homogeneous',
    function(Homogeneous) {
      return {
        restrict: 'E',
        templateUrl: 'vector-homogeneous-template',
        link: function($scope, $element, $attrs) {}
      };
    }
  ])
  .directive('vectorD4', [
    'Homogeneous',
    function(Homogeneous) {
      return {
        restrict: 'E',
        templateUrl: 'vector-4d-template',
        link: function($scope, $element, $attrs) {}
      };
    }
  ])
  .controller('Ctrl', [
    'Rect',
    'Polar',
    'Cartesian',
    'Cylindrical',
    'Spherical',
    'Homogeneous',
    function(Rect, Polar, Cartesian, Cylindrical, Spherical, Homogeneous) {
      this.num1 = 1.3;
      this.rect1 = new Rect(2.5, 3.7);
    }
  ]);
